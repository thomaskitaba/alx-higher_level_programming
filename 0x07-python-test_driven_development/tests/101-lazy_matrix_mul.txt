"""
doctest for matrix multiplication
>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

test case-1 for integers
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
[[7, 10], [15, 22]]

test case-2 for integers
>>> m_a = [[1, 2, 3], [4, 5, 6]]
>>> m_b = [[1, 2], [3, 4], [5, 6]]
>>> lazy_matrix_mul(m_a, m_b)
[[22 28], [49 64]]

test case-2 for integers
>>> m_a = [[1, 2]]
>>> m_b = [[3, 4], [5, 6]]
>>> lazy_matrix_mul(m_a, m_b)
[[13, 16]]

Test case for invalid m_a
>>> m_a = ([1, 2], [3, 4])
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
TypeError: m_a must be a list



Test case for zero length list
>>> m_a = []
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)

Test case for non integer and non float values
>>> m_a = [[1, "thomas"], [3, 4]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U21'), dtype('int64')) -> None

>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, "thomas"], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('int64'), dtype('<U21')) -> None

Test case for non zero len rows
>>> m_a = [[], [], []]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)

>>> m_a = []
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)

Test case for non zero len rows
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[], [], []]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 2)

>>> m_a = [[1, 2], [3, 4]]
>>> m_b = []
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 0 is different from 2)

Test if matrix_a is square
>>> m_a = [[1, 2], [3, 4, 5, 6]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.

Test if matrix_b is square
>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2, 3], [3, 4], [5, 6]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
    ...
ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (3,) + inhomogeneous part.

Test for missing m_a argument
>>> m_a = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a)
Traceback (most recent call last):
    ...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Test for missing m_b argument
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_b)
Traceback (most recent call last):
    ...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

...