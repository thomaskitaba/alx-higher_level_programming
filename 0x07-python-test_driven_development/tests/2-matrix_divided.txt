"""
Divide values inside of a matrix with a give number

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

check normal behaviour
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> matrix_divided(matrix, 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

check if matrix is list
>>> matrix = (
...     [1, 2, 3],
...     [4, 5, 6]
... )
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

check if matrix contains only lists
>>> matrix = [
...     [1, 2, 3],
...     5
... ]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

check if values in the metrix are integer or float
>>> matrix = [
...     [1, 2, 3.9],
...     [4, 5, "thomas kitaba"]
... ]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

check if length of row are equal in matrix
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 5.5, 6.0]
... ]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

Check if divisor is zero
>>> matrix = [
...     [1.1, 2.2, 3.3],
...     [4.4, 5.5, 6.6]
... ]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

check if divisor is number
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> matrix_divided(matrix, "thomas")
Traceback (most recent call last):
    ...
TypeError: div must be a number

Test for empty string
>>> matrix_divided( )
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Test division by Zero inf
>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]
>>> matrix_divided(matrix, float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

"""
